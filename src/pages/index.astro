---
import Root from "../layouts/root.astro";

const EXPEDITIONS = [
  {
    name: "blue",
    btn: "btn-secondary",
  },
  {
    name: "yellow",
    btn: "btn-warning",
  },
  {
    name: "gray",
    btn: "btn-neutral",
  },
  {
    name: "green",
    btn: "btn-success",
  },
  {
    name: "red",
    btn: "btn-error",
  },
];

const GRID_TEMPLATE_AREAS = EXPEDITIONS.map(({ name }) => name);

const WAGERS = [1, 2, 3];

const SCORES = [2, 3, 4, 5, 6, 7, 8, 9, 10];
---

<script>
  import Alpine from "alpinejs";

  const EXPEDITION_COST = 20;

  Alpine.data("expedition", () => ({
    reset() {
      this.wagers.clear();
      this.scores.clear();
    },

    get size() {
      return this.wagers.size + this.scores.size;
    },

    get bonus() {
      return this.size >= 8 ? 20 : 0;
    },

    get multiplier() {
      return this.wagers.size + 1;
    },

    wagers: new Set<number>(),
    toggleWager(wager: number) {
      // uncheck higher wagers
      if (wager < this.wagers.size) {
        for (const index of this.wagers) {
          if (index > wager) {
            this.wagers.delete(index);
          }
        }
      }

      // check all wagers up to the selected one
      else if (wager > this.wagers.size) {
        for (let index = 0; index < wager; index++) {
          this.wagers.add(index + 1);
        }
      }

      // uncheck all wagers up from the selected one
      else {
        for (const index of this.wagers) {
          if (index >= wager) {
            this.wagers.delete(index);
          }
        }
      }
    },

    scores: new Set<number>(),
    toggleScore(score: number) {
      if (this.scores.has(score)) {
        this.scores.delete(score);
      } else {
        this.scores.add(score);
      }
    },

    get scoresSum() {
      return Array.from(this.scores).reduce((acc, score) => acc + score, 0);
    },

    get totalScore() {
      if (this.size === 0) {
        return 0;
      }

      return (this.scoresSum - EXPEDITION_COST) * this.multiplier + this.bonus;
    },

    get totalScoreHint() {
      if (this.size === 0) {
        return [];
      }

      const scores =
        this.scores.size === 0
          ? "0"
          : Array.from(this.scores)
              .sort((left, right) => left - right)
              .join(" + ");

      return [
        this.multiplier > 1 ? `${this.multiplier} √ó ` : "",
        "(",
        scores,
        ` - ${EXPEDITION_COST}`,
        ")",
        this.bonus > 0 ? ` + ${this.bonus}` : "",
      ]
        .filter((fragment) => fragment.length > 0)
        .join("");
    },
  }));
</script>
<Root>
  <div
    class="py-3"
    x-data={`{
      mirror: $persist(false),
    
      ${EXPEDITIONS.map(({ name }) => `${name}: expedition(),`).join("")}

      get total() {
        return ${EXPEDITIONS.map(({ name }) => `this.${name}.totalScore`).join(" + ")};
      },

      get totalDigits() {
        return Math.abs(this.total).toString().padStart(3, '0').split('');
      },

      get totalSign() {
        return this.total < 0 ? '-' : '+';
      },

      reset() {
        ${EXPEDITIONS.map(({ name }) => `this.${name}.reset();`).join("")}
      }
    }`}
  >
    <table class="!grid grid-cols-5 table table-sm text-center">
      <tbody class="grid grid-cols-subgrid col-span-full">
        {
          WAGERS.map((wager) => (
            <tr class="grid grid-cols-subgrid col-span-full">
              {EXPEDITIONS.map(({ name, btn }, index, arr) => (
                <td
                  x-bind:style={`'order:' + (mirror ? ${arr.length - index} : ${index}) + ';'`}
                >
                  <button
                    name={`${name}-wager-${wager}`}
                    type="button"
                    role="checkbox"
                    x-bind:aria-checked={`${name}.wagers.has(${wager})`}
                    x-on:click={`${name}.toggleWager(${wager})`}
                    class:list={[
                      "btn btn-square btn-xs not-aria-checked:btn-outline",
                      btn,
                    ]}
                  >
                    ü§ù
                  </button>
                </td>
              ))}
            </tr>
          ))
        }

        {
          SCORES.map((score) => (
            <tr class="grid grid-cols-subgrid col-span-full">
              {EXPEDITIONS.map(({ name, btn }, index, arr) => (
                <td
                  x-bind:style={`'order:' + (mirror ? ${arr.length - index} : ${index}) + ';'`}
                >
                  <button
                    name={`${name}-score-${score}`}
                    type="button"
                    role="checkbox"
                    x-bind:aria-checked={`${name}.scores.has(${score})`}
                    x-on:click={`(${name}.toggleScore(${score}))`}
                    class:list={[
                      "btn btn-square btn-xs not-aria-checked:btn-outline",
                      btn,
                    ]}
                  >
                    {score}
                  </button>
                </td>
              ))}
            </tr>
          ))
        }

        <tfoot class="grid grid-cols-subgrid col-span-full border-t-4">
          <tr class="grid grid-cols-subgrid col-span-full">
            {
              EXPEDITIONS.map(({ name }, index, arr) => (
                <td
                  x-bind:style={`'order:' + (mirror ? ${arr.length - index} : ${index}) + ';'`}
                >
                  <span
                    class="tooltip w-full select-none underline-offset-4 decoration-dotted"
                    x-bind:class={`${name}.totalScore === 0 ? 'cursor-default' : 'cursor-help underline'`}
                  >
                    <span
                      class="tooltip-content"
                      x-bind:class={
                        index < 2
                          ? "mirror ? '!right-0 !left-auto !transform-none' : '!left-0 !right-auto !transform-none'"
                          : index > 2
                            ? "mirror ? '!left-0 !right-auto !transform-none' : '!right-0 !left-auto !transform-none'"
                            : "''"
                      }
                      x-text={`${name}.totalScoreHint`}
                    />
                    <span x-text={`${name}.totalScore`} />
                  </span>

                  {index > 0 && (
                    <span class="absolute right-full inset-y-0 flex items-center">
                      +
                    </span>
                  )}
                </td>
              ))
            }
          </tr>
        </tfoot>
      </tbody>
    </table>

    <section
      class="mt-2 flex flex-row px-3 gap-8 justify-around items-center content-center"
    >
      <button
        type="button"
        class="btn btn-primary btn-circle btn-outline"
        x-on:click="mirror = !mirror"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 16 16"
        >
          <g fill="currentColor" fill-rule="evenodd">
            <path
              color="currentColor"
              overflow="visible"
              d="M7 1036.362h2v16H7z"
              transform="translate(0 -1036.362)"></path>
            <path d="M6 2v3H2v8h4v1H1V2zM10 2v3h4v8h-4v1h5V2z"></path>
          </g>
        </svg>
      </button>

      <div class="flex justify-center font-mono text-6xl">
        <span class="countdown countdown-sign">
          <span
            x-bind:style="'--value:' + Math.sign(total) + ';'"
            aria-live="polite"
            x-text="totalSign"
            x-bind:aria-label="totalSign"
          >
          </span>
        </span>
        <template x-for="digit of totalDigits">
          <span class="countdown countdown-digit">
            <span
              x-bind:style="'--value:' + digit + ';'"
              aria-live="polite"
              x-text="digit"
              x-bind:aria-label="digit"
            >
            </span>
          </span>
        </template>
        <!-- balance the digits in middle -->
        <span>&nbsp;</span>
      </div>

      <button
        type="button"
        class="btn btn-primary btn-circle btn-outline"
        x-on:click="reset()"
      >
        <svg
          class="fill-current"
          width="16"
          height="16"
          viewBox="0 0 1920 1920"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M960 0v213.333c411.627 0 746.667 334.934 746.667 746.667S1371.627 1706.667 960 1706.667 213.333 1371.733 213.333 960c0-197.013 78.4-382.507 213.334-520.747v254.08H640V106.667H53.333V320h191.04C88.64 494.08 0 720.96 0 960c0 529.28 430.613 960 960 960s960-430.72 960-960S1489.387 0 960 0"
            fill-rule="evenodd"></path>
        </svg>
      </button>
    </section>
  </div>
</Root>
