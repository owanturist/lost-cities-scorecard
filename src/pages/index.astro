---
import Layout from "../layouts/Layout.astro";

const EXPEDITIONS = [
  {
    name: "blue",
    background: { checked: "aria-checked:bg-blue-500" },
    text: "text-blue-500",
    border: "border-blue-500",
  },
  {
    name: "yellow",
    background: { checked: "aria-checked:bg-yellow-500" },
    text: "text-yellow-500",
    border: "border-yellow-500",
  },
  {
    name: "gray",
    background: { checked: "aria-checked:bg-gray-200" },
    text: "text-gray-200",
    border: "border-gray-200",
  },
  {
    name: "green",
    background: { checked: "aria-checked:bg-green-500" },
    text: "text-green-500",
    border: "border-green-500",
  },
  {
    name: "red",
    background: { checked: "aria-checked:bg-red-500" },
    text: "text-red-500",
    border: "border-red-500",
  },
];

const WAGERS = [1, 2, 3];

const SCORES = [2, 3, 4, 5, 6, 7, 8, 9, 10];
---

<script>
  import Alpine from "alpinejs";

  const EXPEDITION_COST = 20;

  Alpine.data("expedition", () => ({
    get size() {
      return this.wagers.size + this.scores.size;
    },

    get bonus() {
      return this.size >= 8 ? 20 : 0;
    },

    get multiplier() {
      return this.wagers.size + 1;
    },

    wagers: new Set<number>(),
    toggleWager(wager: number) {
      // uncheck higher wagers
      if (wager < this.wagers.size) {
        for (const index of this.wagers) {
          if (index > wager) {
            this.wagers.delete(index);
          }
        }
      }

      // check all wagers up to the selected one
      else if (wager > this.wagers.size) {
        for (let index = 0; index < wager; index++) {
          this.wagers.add(index + 1);
        }
      }

      // uncheck all wagers up from the selected one
      else {
        for (const index of this.wagers) {
          if (index >= wager) {
            this.wagers.delete(index);
          }
        }
      }
    },

    scores: new Set<number>(),
    toggleScore(score: number) {
      if (this.scores.has(score)) {
        this.scores.delete(score);
      } else {
        this.scores.add(score);
      }
    },

    get scoresSum() {
      return Array.from(this.scores).reduce((acc, score) => acc + score, 0);
    },

    get totalScore() {
      if (this.size === 0) {
        return 0;
      }

      return (this.scoresSum - EXPEDITION_COST) * this.multiplier + this.bonus;
    },

    get totalScoreHint() {
      if (this.size === 0) {
        return [];
      }

      const scores =
        this.scores.size === 0
          ? "0"
          : Array.from(this.scores)
              .sort((left, right) => left - right)
              .join(" + ");

      const expeditionCost = `Expedition cost: -${EXPEDITION_COST}`;
      const wages = `Wages: ${this.wagers.size} = √ó${this.multiplier}`;
      const bonus = this.bonus > 0 ? `Bonus: ${this.bonus}` : null;

      return [
        "(",
        scores,
        ` - ${EXPEDITION_COST}`,
        ")",
        this.multiplier > 1 ? ` √ó ${this.multiplier}` : "",
        this.bonus > 0 ? ` + ${this.bonus}` : "",
      ]
        .filter((fragment) => fragment.length > 0)
        .join("");
    },
  }));
</script>
<Layout>
  <div
    class="py-3"
    x-data={`{
      ${EXPEDITIONS.map(({ name }) => `${name}: expedition(),`).join("")}

      get total() {
        return ${EXPEDITIONS.map(({ name }) => `this.${name}.totalScore`).join(" + ")};
      }
    }`}
  >
    <table class="table table-sm text-center">
      <tbody>
        {
          WAGERS.map((wager) => (
            <tr>
              {EXPEDITIONS.map(({ name, background, border }) => (
                <td>
                  <button
                    name={`${name}-wager-${wager}`}
                    role="checkbox"
                    x-bind:aria-checked={`${name}.wagers.has(${wager})`}
                    x-on:click={`${name}.toggleWager(${wager})`}
                    class:list={[
                      "btn btn-square btn-xs",
                      border,
                      background.checked,
                    ]}
                  >
                    ü§ù
                  </button>
                </td>
              ))}
            </tr>
          ))
        }

        {
          SCORES.map((score) => (
            <tr>
              {EXPEDITIONS.map(({ name, text, border, background }) => (
                <td>
                  <button
                    name={`${name}-score-${score}`}
                    role="checkbox"
                    x-bind:aria-checked={`${name}.scores.has(${score})`}
                    x-on:click={`(${name}.toggleScore(${score}))`}
                    class:list={[
                      "btn btn-square btn-xs aria-checked:text-base-100",
                      text,
                      border,
                      background.checked,
                    ]}
                  >
                    {score}
                  </button>
                </td>
              ))}
            </tr>
          ))
        }

        <tfoot class="border-t-4">
          <tr>
            {
              EXPEDITIONS.map(({ name }) => (
                <td>
                  <span
                    class="tooltip select-none underline-offset-4 decoration-dotted"
                    x-bind:data-tip={`${name}.totalScoreHint`}
                    x-text={`${name}.totalScore`}
                    x-bind:class={`${name}.totalScore === 0 ? 'cursor-default' : 'cursor-help underline'`}
                  />
                </td>
              ))
            }
          </tr>
        </tfoot>
      </tbody>
    </table>

    <div class="stat">
      <div class="stat-title">Total</div>
      <div class="stat-value" x-text="total"></div>
    </div>
  </div>
</Layout>
